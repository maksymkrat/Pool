@using Pool.Shared.Models

<div class="tableWrap mt-5">
    <table class="table table-striped p-0 ">
        <thead class="table-dark">
        <tr>
            <th scope="col">
                Word
                <input class="" type="text" placeholder="search"  @oninput="SearchWords"/>
                
            </th>
            <th scope="col">Translate</th>
            <th scope="col"> @Words.Count my words</th>
        </tr>
        </thead>
        <tbody >
        @foreach (var item in Words)
        {
            <tr class="word">
                <td >
                    <div class="col">
                        <span>@item.WordText</span>

                        <button class="btn btn-success float-end" @onclick="(() => SayWord.InvokeAsync(item))">
                            <i class="fas fa-volume-up"></i>
                        </button>
                    </div>
                </td>

                <td >@item.Translation</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => UpdateWord.InvokeAsync(item))">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-danger" @onclick="(() => DeleteWord.InvokeAsync(item))">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>


@code {

    [Parameter]
    public List<WordModel> Words { get; set; }

    [Parameter]
    public EventCallback<WordModel> DeleteWord { get; set; }

    [Parameter]
    public EventCallback<WordModel> UpdateWord { get; set; }

    [Parameter]
    public EventCallback<WordModel> SayWord { get; set; }

    protected string searchWord;
    
    [Parameter]
    public EventCallback<string> SearchWord { get; set; }

    protected async Task SearchWords(ChangeEventArgs e)
    {
        searchWord = (string)e.Value;
        await SearchWord.InvokeAsync(searchWord);
    }

   

}